name: build and push spring boot to aws ecr
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SERVER_IP: ${{ secrets.PUBLIC_SERVER_IP }}
  AWS_REGION: ap-south-1

jobs:
  build-and-push:
    name: Build and push to AWS ECR
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - name: set up jdk 17
      uses: actions/setup-java@v2
      with:
        java-version: 17
        distribution: 'adopt'
    
    - name: build
      run: ./gradlew clean build
    
    - name: debug
      run: echo "${{ toJson(env) }}"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#        aws-session-token: ${{ env.AWS_SESSION_TOKEN }}
        aws-region: ap-south-1
    
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, Tag, and push the image to amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: github-actions-demo-repository
        IMAGE_TAG: latest
        OUTPUT: ${{ toJson(steps.login-ecr.outputs) }}
      run: |
        echo $ECR_REGISTRY
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: deploy docker image to ec2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: github-actions-demo-repository
        IMAGE_TAG: latest 
        AWS_DEFAULT_REGION: us-east-1
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.PUBLIC_SERVER_IP }}
        username: ubuntu
        key: ${{ env.PRIVATE_SSH_KEY }}
        envs: PRIVATE_SSH_KEY,ECR_REGISTRY,ECR_REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_DEFAULT_REGION,AWS_REGION
        script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region ap-south-1);
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 8080:8080 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG